#!/usr/bin/env ruby
$here = File.expand_path(File.dirname(__FILE__))
$here = File.expand_path(File.dirname(File.readlink(__FILE__))) if File.symlink?(__FILE__)
require 'fileutils'
include FileUtils

class Virc 

  def usage(*args)
    puts DATA.read
  end

  def list(*args)
    args.flatten!
    Dir[$here+"/*"].each do |p|
      if File.directory?(p)
        config = p.split("/").last
        config += "*" if config == current(true)
        puts config
      end
    end

  end

  def use(*args)
    args.flatten!
    if args.size == 1
      config = args[0]
      check_for(config)
      unlink_current
      setup_links(config)
      save_current(config)
    else
      usage
    end
  end

  def current(args)
    path = File.read(File.join($here, ".current")).split("\n").first
    if args
      path
    else
      puts path
    end
  end

  def prompt_info(args)
    puts "virc:" + File.read(File.join($here, ".current"))
  end

  def method_missing(m, *args, &block)
    usage
  end

  private

  def check_for(name)
    raise "Could not find '#{name}' directory in [#{$here}]. Perhaps do a 'virc list'" unless Dir.glob($here+"/**").include?("#{$here}/#{name}")
  end

  def save_current(config)
    File.open(File.join($here, ".current"), "w") {|f| f.puts config}
  end

  def unlink_current
    Dir.entries("#{ENV['HOME']}").each do |path|
      path = File.expand_path(File.join(ENV['HOME'], path))
      next if path[-1] == '.'
      if File.symlink? path
        link_path     = File.readlink(path)
        includes_base = link_path.start_with?($here)
        File.unlink(path) if includes_base
        puts "Removed [#{path}]"
      end
    end
  end

  def setup_links(vim_config)
    vim_config_path = File.join($here, vim_config)
    Dir.entries("#{vim_config_path}").each do |path|
      next if path[-1] == '.' or path == vim_config_path
      begin
        dest_path = File.join(ENV["HOME"], path)
        path = File.join(vim_config_path, path) unless path.start_with? vim_config_path
        File.symlink path, dest_path
        puts "Added   [#{dest_path}]"
      rescue Exception => e
        puts "#{e.message}. Continuing" if debug
      end
    end
  end

  def debug
    ENV["debug"] || ENV["DEBUG"]
  end

end

if __FILE__ == $0
  instance = Virc.new
  if ARGV.size > 0
    begin
      command  = ARGV.shift
      instance.send(command, ARGV)
    rescue Exception => e
      puts e.message
    end
  else
    instance.usage
  end
end

__END__
===============================================================

                VIRCS - vim config management

===============================================================

  SETUP

    To use vircs place the source files for vircs anywhere you wish to.

      * Link vircs to a bin directory in your path. Note: make sure to start a new terminal
      * Create folders in the vircs folder including all of your vim configuration in them.
        EX: 
          /path/to/vircs/folder/config1
          /path/to/vircs/folder/config2
          /path/to/vircs/folder/config3

  COMMANDS

    usage: lists this lovely help file :)
           EX: vircs usage

    list: lists all of the available vim configurations
          EX: vircs list

    use: switchs to the supplied vim configuration
          EX: vircs use foo
          (this will switch to the foo configuration)

    current: displays the current vim configuration
          EX: vircs current

    prompt_info: displays the current vim configuration as follows "vircs:config_x"
                 where config_x is the current configuration
          EX: vircs prompt_info

